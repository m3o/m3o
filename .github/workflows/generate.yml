name: Generate Clients & Examples
on:
  push:
    branches:
      - main
      - beta
  repository_dispatch:
    types: [micro_services]

jobs:
  generate:
    name: Generate Clients
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v2
        with:
          go-version: 1.13
        id: go

      - name: Install Protoc
        uses: arduino/setup-protoc@master

      - name: Check m3o repo
        uses: actions/checkout@v2
        with:
          path: m3o
          ref: ${{ github.ref }}

      - name: Check services repo
        uses: actions/checkout@v2
        with:
          repository: 'micro/services'
          path: services

      - name: Check micro repo
        uses: actions/checkout@v2
        with:
          repository: 'micro/micro'
          path: 'micro'
          ref: 'master'

      - name: Check m3o-go repo
        uses: actions/checkout@v2
        with:
          repository: 'm3o/m3o-go'
          path: m3o-go

      - name: Enable caching
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install protoc gen micro plugin
        working-directory: micro/cmd/protoc-gen-micro
        run: |
          go get -u github.com/golang/protobuf/protoc-gen-go
          go install

      - name: Install openapi plugin
        working-directory: m3o/cmd/protoc-gen-openapi
        run: |
          go install

      - name: Install generator
        working-directory: m3o
        run: |
          # build the client generator
          pwd
          cd cmd/client-gen;
          go install
          cd ../../
          # delete existing cmd directory
          rm -rf ../services/cmd
          # copy our command directory in
          cp -r cmd ../services/

      - name: install prettier
        working-directory: services
        run: |
          sudo npm install -g prettier

      - name: Generate Go and JS packages
        working-directory: services
        if: github.ref == 'refs/heads/main'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          rm -rf clients examples
          client-gen .

      - name: Generate beta package
        working-directory: services
        if: github.ref == 'refs/heads/beta'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          IS_BETA: yup
        run: |
          rm -rf clients examples
          client-gen .

      - name: Adjust generated things before pushing
        working-directory: services
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta'
        run: |
          # sync the clients to m3o-go/
          rsync -avz clients/go/ ../m3o-go/
          # sync the examples to m3o-go/examples
          rsync -avz examples/go/ ../m3o-go/examples/
          # remove the .git directory
          rm -rf ../m3o-go/.git
          #  move the js examples
          mkdir clients/ts/examples
          mv examples/js/* clients/ts/examples/

      - name: Gofmt and test
        working-directory: m3o-go
        env:
          IN_TRAVIS: yes
        run: |
          go fmt ./...
          go test -v ./...

      # https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Push Go files
        uses: dmnemec/copy_file_to_another_repo_action@main
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta'
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: 'm3o-go/'
          destination_repo: 'm3o/m3o-go'
          destination_branch: ${{ steps.extract_branch.outputs.branch }}
          github_server: 'github.com'
          user_name: 'm3o-actions'
          use_rsync: true
          commit_message: 'Commit from m3o/m3o action'

      - name: Push JS files
        uses: dmnemec/copy_file_to_another_repo_action@main
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta'
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: 'services/clients/ts/'
          destination_repo: 'm3o/m3o-js'
          destination_branch: ${{ steps.extract_branch.outputs.branch }}
          github_server: 'github.com'
          user_name: 'm3o-actions'
          use_rsync: true
          commit_message: 'Commit from m3o/m3o action'

      - name: Push shell files
        uses: dmnemec/copy_file_to_another_repo_action@main
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta'
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: 'services/examples/curl/'
          destination_repo: 'm3o/m3o-sh'
          destination_folder: 'examples'
          destination_branch: '${{ steps.extract_branch.outputs.branch }}'
          github_server: 'github.com'
          user_name: 'm3o-actions'
          use_rsync: true
          commit_message: 'Commit from m3o/m3o action'

      - name: install postman converter
        working-directory: services
        run: |
          sudo npm install -g openapi-to-postmanv2
          openapi2postmanv2 -h

      - name: Generate openapi spec and publish the api
        working-directory: services
        if: github.ref == 'refs/heads/main'
        run: |
          go run cmd/api-publisher/main.go .
        env:
          MICRO_ADMIN_TOKEN: ${{ secrets.MICRO_ADMIN_TOKEN }}

      - name: publish npm clients
        working-directory: services
        if: github.ref == 'refs/heads/main'
        run: |
          git status
          cd clients/ts;
          if [ ! -f .npmrc ]; then echo "missing .npmrc" && exit 1; fi
          npm install
          npm run build
          npm publish --access public

      - name: publish npm beta clients
        working-directory: services
        if: github.ref == 'refs/heads/beta'
        run: |
          git status
          cd clients/ts;
          if [ ! -f .npmrc ]; then echo "missing .npmrc" && exit 1; fi
          npm install
          npm run build
          npm publish --access public --tag beta

