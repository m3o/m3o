// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ai.proto

package ai

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Ai service

func NewAiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Ai service

type AiService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
	Moderate(ctx context.Context, in *ModerateRequest, opts ...client.CallOption) (*ModerateResponse, error)
}

type aiService struct {
	c    client.Client
	name string
}

func NewAiService(name string, c client.Client) AiService {
	return &aiService{
		c:    c,
		name: name,
	}
}

func (c *aiService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Ai.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiService) Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "Ai.Check", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiService) Moderate(ctx context.Context, in *ModerateRequest, opts ...client.CallOption) (*ModerateResponse, error) {
	req := c.c.NewRequest(c.name, "Ai.Moderate", in)
	out := new(ModerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ai service

type AiHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	Check(context.Context, *CheckRequest, *CheckResponse) error
	Moderate(context.Context, *ModerateRequest, *ModerateResponse) error
}

func RegisterAiHandler(s server.Server, hdlr AiHandler, opts ...server.HandlerOption) error {
	type ai interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		Check(ctx context.Context, in *CheckRequest, out *CheckResponse) error
		Moderate(ctx context.Context, in *ModerateRequest, out *ModerateResponse) error
	}
	type Ai struct {
		ai
	}
	h := &aiHandler{hdlr}
	return s.Handle(s.NewHandler(&Ai{h}, opts...))
}

type aiHandler struct {
	AiHandler
}

func (h *aiHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.AiHandler.Call(ctx, in, out)
}

func (h *aiHandler) Check(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.AiHandler.Check(ctx, in, out)
}

func (h *aiHandler) Moderate(ctx context.Context, in *ModerateRequest, out *ModerateResponse) error {
	return h.AiHandler.Moderate(ctx, in, out)
}
