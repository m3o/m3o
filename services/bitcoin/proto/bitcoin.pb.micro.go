// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bitcoin.proto

package bitcoin

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Bitcoin service

func NewBitcoinEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Bitcoin service

type BitcoinService interface {
	Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error)
	Price(ctx context.Context, in *PriceRequest, opts ...client.CallOption) (*PriceResponse, error)
	Balance(ctx context.Context, in *BalanceRequest, opts ...client.CallOption) (*BalanceResponse, error)
	Transaction(ctx context.Context, in *TransactionRequest, opts ...client.CallOption) (*TransactionResponse, error)
}

type bitcoinService struct {
	c    client.Client
	name string
}

func NewBitcoinService(name string, c client.Client) BitcoinService {
	return &bitcoinService{
		c:    c,
		name: name,
	}
}

func (c *bitcoinService) Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error) {
	req := c.c.NewRequest(c.name, "Bitcoin.Lookup", in)
	out := new(LookupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinService) Price(ctx context.Context, in *PriceRequest, opts ...client.CallOption) (*PriceResponse, error) {
	req := c.c.NewRequest(c.name, "Bitcoin.Price", in)
	out := new(PriceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinService) Balance(ctx context.Context, in *BalanceRequest, opts ...client.CallOption) (*BalanceResponse, error) {
	req := c.c.NewRequest(c.name, "Bitcoin.Balance", in)
	out := new(BalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinService) Transaction(ctx context.Context, in *TransactionRequest, opts ...client.CallOption) (*TransactionResponse, error) {
	req := c.c.NewRequest(c.name, "Bitcoin.Transaction", in)
	out := new(TransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bitcoin service

type BitcoinHandler interface {
	Lookup(context.Context, *LookupRequest, *LookupResponse) error
	Price(context.Context, *PriceRequest, *PriceResponse) error
	Balance(context.Context, *BalanceRequest, *BalanceResponse) error
	Transaction(context.Context, *TransactionRequest, *TransactionResponse) error
}

func RegisterBitcoinHandler(s server.Server, hdlr BitcoinHandler, opts ...server.HandlerOption) error {
	type bitcoin interface {
		Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error
		Price(ctx context.Context, in *PriceRequest, out *PriceResponse) error
		Balance(ctx context.Context, in *BalanceRequest, out *BalanceResponse) error
		Transaction(ctx context.Context, in *TransactionRequest, out *TransactionResponse) error
	}
	type Bitcoin struct {
		bitcoin
	}
	h := &bitcoinHandler{hdlr}
	return s.Handle(s.NewHandler(&Bitcoin{h}, opts...))
}

type bitcoinHandler struct {
	BitcoinHandler
}

func (h *bitcoinHandler) Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error {
	return h.BitcoinHandler.Lookup(ctx, in, out)
}

func (h *bitcoinHandler) Price(ctx context.Context, in *PriceRequest, out *PriceResponse) error {
	return h.BitcoinHandler.Price(ctx, in, out)
}

func (h *bitcoinHandler) Balance(ctx context.Context, in *BalanceRequest, out *BalanceResponse) error {
	return h.BitcoinHandler.Balance(ctx, in, out)
}

func (h *bitcoinHandler) Transaction(ctx context.Context, in *TransactionRequest, out *TransactionResponse) error {
	return h.BitcoinHandler.Transaction(ctx, in, out)
}
