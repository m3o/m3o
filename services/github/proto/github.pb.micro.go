// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/github.proto

package github

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Github service

func NewGithubEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Github service

type GithubService interface {
	// Authorize the M3O Github app - completes the installation
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...client.CallOption) (*AuthorizeResponse, error)
	// Get list of all the repos accessible from this installation
	ListRepos(ctx context.Context, in *ListReposRequest, opts ...client.CallOption) (*ListReposResponse, error)
	// Get branches for a repo
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...client.CallOption) (*ListBranchesResponse, error)
	// Get a token that can be used with this user's repo
	Token(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error)
}

type githubService struct {
	c    client.Client
	name string
}

func NewGithubService(name string, c client.Client) GithubService {
	return &githubService{
		c:    c,
		name: name,
	}
}

func (c *githubService) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...client.CallOption) (*AuthorizeResponse, error) {
	req := c.c.NewRequest(c.name, "Github.Authorize", in)
	out := new(AuthorizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubService) ListRepos(ctx context.Context, in *ListReposRequest, opts ...client.CallOption) (*ListReposResponse, error) {
	req := c.c.NewRequest(c.name, "Github.ListRepos", in)
	out := new(ListReposResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubService) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...client.CallOption) (*ListBranchesResponse, error) {
	req := c.c.NewRequest(c.name, "Github.ListBranches", in)
	out := new(ListBranchesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubService) Token(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "Github.Token", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Github service

type GithubHandler interface {
	// Authorize the M3O Github app - completes the installation
	Authorize(context.Context, *AuthorizeRequest, *AuthorizeResponse) error
	// Get list of all the repos accessible from this installation
	ListRepos(context.Context, *ListReposRequest, *ListReposResponse) error
	// Get branches for a repo
	ListBranches(context.Context, *ListBranchesRequest, *ListBranchesResponse) error
	// Get a token that can be used with this user's repo
	Token(context.Context, *TokenRequest, *TokenResponse) error
}

func RegisterGithubHandler(s server.Server, hdlr GithubHandler, opts ...server.HandlerOption) error {
	type github interface {
		Authorize(ctx context.Context, in *AuthorizeRequest, out *AuthorizeResponse) error
		ListRepos(ctx context.Context, in *ListReposRequest, out *ListReposResponse) error
		ListBranches(ctx context.Context, in *ListBranchesRequest, out *ListBranchesResponse) error
		Token(ctx context.Context, in *TokenRequest, out *TokenResponse) error
	}
	type Github struct {
		github
	}
	h := &githubHandler{hdlr}
	return s.Handle(s.NewHandler(&Github{h}, opts...))
}

type githubHandler struct {
	GithubHandler
}

func (h *githubHandler) Authorize(ctx context.Context, in *AuthorizeRequest, out *AuthorizeResponse) error {
	return h.GithubHandler.Authorize(ctx, in, out)
}

func (h *githubHandler) ListRepos(ctx context.Context, in *ListReposRequest, out *ListReposResponse) error {
	return h.GithubHandler.ListRepos(ctx, in, out)
}

func (h *githubHandler) ListBranches(ctx context.Context, in *ListBranchesRequest, out *ListBranchesResponse) error {
	return h.GithubHandler.ListBranches(ctx, in, out)
}

func (h *githubHandler) Token(ctx context.Context, in *TokenRequest, out *TokenResponse) error {
	return h.GithubHandler.Token(ctx, in, out)
}
