// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/url.proto

package url

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Url service

func NewUrlEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Url service

type UrlService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Shorten(ctx context.Context, in *ShortenRequest, opts ...client.CallOption) (*ShortenResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Resolve(ctx context.Context, in *ResolveRequest, opts ...client.CallOption) (*ResolveResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type urlService struct {
	c    client.Client
	name string
}

func NewUrlService(name string, c client.Client) UrlService {
	return &urlService{
		c:    c,
		name: name,
	}
}

func (c *urlService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Url.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlService) Shorten(ctx context.Context, in *ShortenRequest, opts ...client.CallOption) (*ShortenResponse, error) {
	req := c.c.NewRequest(c.name, "Url.Shorten", in)
	out := new(ShortenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Url.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlService) Resolve(ctx context.Context, in *ResolveRequest, opts ...client.CallOption) (*ResolveResponse, error) {
	req := c.c.NewRequest(c.name, "Url.Resolve", in)
	out := new(ResolveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "Url.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Url.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Url service

type UrlHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Shorten(context.Context, *ShortenRequest, *ShortenResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Resolve(context.Context, *ResolveRequest, *ResolveResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterUrlHandler(s server.Server, hdlr UrlHandler, opts ...server.HandlerOption) error {
	type url interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Shorten(ctx context.Context, in *ShortenRequest, out *ShortenResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Resolve(ctx context.Context, in *ResolveRequest, out *ResolveResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type Url struct {
		url
	}
	h := &urlHandler{hdlr}
	return s.Handle(s.NewHandler(&Url{h}, opts...))
}

type urlHandler struct {
	UrlHandler
}

func (h *urlHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.UrlHandler.Create(ctx, in, out)
}

func (h *urlHandler) Shorten(ctx context.Context, in *ShortenRequest, out *ShortenResponse) error {
	return h.UrlHandler.Shorten(ctx, in, out)
}

func (h *urlHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.UrlHandler.List(ctx, in, out)
}

func (h *urlHandler) Resolve(ctx context.Context, in *ResolveRequest, out *ResolveResponse) error {
	return h.UrlHandler.Resolve(ctx, in, out)
}

func (h *urlHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.UrlHandler.Update(ctx, in, out)
}

func (h *urlHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.UrlHandler.Delete(ctx, in, out)
}
